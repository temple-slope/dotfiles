// Place your key bindings in this file to override the defaults
[
  // =========================================
  // üß† Cursor AI Composer
  // =========================================
  {
    "key": "cmd+i",
    "command": "composerMode.agent"
  },

  // =========================================
  // üìÑ Suggestion widget navigation
  // =========================================
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "shift+alt+cmd+g",
    "command": "issue.copyGithubPermalink"
  },

  // =========================================
  // üìù Copy path
  // =========================================
  {
    "key": "shift+alt+cmd+p",
    "command": "copyRelativeFilePath",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "cmd+alt+shift+f",
    "command": "copyFilePath",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "shift+alt+cmd+p",
    "command": "copyRelativeFilePath",
    "when": "!editorFocus"
  },

  // =========================================
  // üîç Quick Open (Cmd + P) navigation
  // =========================================
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },

  // =========================================
  // ü™ü Editor group focus movement
  // =========================================
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusLeftGroup",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusRightGroup",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.focusBelowGroup",
    "when": "editorTextFocus && !suggestWidgetVisible"
  },
  {
    "key": "shift+ctrl+l",
    "command": "workbench.action.nextEditor",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+ctrl+h",
    "command": "workbench.action.previousEditor",
    "when": "editorTextFocus"
  },

  // =========================================
  // üìÅ Explorer view file operations
  // =========================================
  {
    "key": "n",
    "command": "explorer.newFile",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "shift+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "list.toggleFindMode",
    "when": "filesExplorerFocus"
  },
  {
    "key": "cmd+enter",
    "command": "explorer.openToSide",
    "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "explorerViewletFocus"
  },
  {
    "key": "shift+cmd+g",
    "command": "workbench.view.scm",
    "when": "workbench.scm.active"
  },

  // =========================================
  // üßπ Unbinding (removing default bindings)
  // =========================================
  {
    "key": "cmd+t",
    "command": "-composer.createNewComposerTab",
    "when": "composerFocused || focusedView =~ /^workbench.panel.aichat.view/"
  },
  {
    "key": "cmd+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+h",
    "command": "-testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  {
    "key": "ctrl+j",
    "command": "-editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+j",
    "command": "-quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "-explorer.openToSide",
    "when": "explorerViewletFocus && foldersViewVisible && !inputFocus"
  },
  {
    "key": "ctrl+shift+g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active"
  },
  {
    "key": "cmd+k alt+cmd+s",
    "command": "-git.stageSelectedRanges",
    "when": "isInDiffEditor && !operationInProgress"
  },
  {
    "key": "shift+alt+cmd+c",
    "command": "-copyRelativeFilePath",
    "when": "!editorFocus"
  }

  // =========================================
  // Êú™Êï¥ÁêÜ
  // =========================================
  // {
  //   "key": "space",
  //   "command": "git.stageSelectedRanges",
  //   "when": "isInDiffEditor && !operationInProgress"
  // },
  // {
  //   "key": "shift+space",
  //   "command": "git.stageAllUntracked"
  // },
  // {
  //   "key": "shift+space",
  //   "command": "git.stageAll",
  //   "when": "scmRepositoryVisible && scmResourceGroup == 'workingTree'"
  // },
  // {
  //   "key": "space",
  //   "command": "git.stage",
  //   "when": "scmResourceGroup == 'workingTree'"
  // }
]
